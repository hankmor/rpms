package dendy.rpms.entity;

// Generated 2014-10-26 13:48:43 by Hibernate Tools 3.6.0

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "rpms", uniqueConstraints = @UniqueConstraint(columnNames = "NAME"))
public class User implements java.io.Serializable {

	private Long				id;
	private String				name;
	private String				password;
	private String				trueName;
	private Boolean				sex;
	private Integer				age;
	private Date				createTime;
	private Integer				status;
	private String				remark;
	private Set<Genotype>		genotypesForUpdateUser		= new HashSet<Genotype>(0);
	private Set<AntiEpidemic>	antiEpidemicsForCreateUser	= new HashSet<AntiEpidemic>(0);
	private Set<Atta>			attasForUpdateUser			= new HashSet<Atta>(0);
	private Set<AnimalType>		animalTypesForCreateUser	= new HashSet<AnimalType>(0);
	private Set<House>			housesForUpdateUser			= new HashSet<House>(0);
	private Set<Anatomy>		anatomiesForCreateUser		= new HashSet<Anatomy>(0);
	private Set<Atta>			attasForUploadUser			= new HashSet<Atta>(0);
	private Set<HouseTransfer>	houseTransfersForUpdateUser	= new HashSet<HouseTransfer>(0);
	private Set<Primer>			primersForCreateUser		= new HashSet<Primer>(0);
	private Set<AnimalFeed>		animalFeedsForFeedUser		= new HashSet<AnimalFeed>(0);
	private Set<Role>			roles						= new HashSet<Role>(0);
	private Set<Animal>			animalsForUpdateUser		= new HashSet<Animal>(0);
	private Set<Examination>	examinationsForUpdateUser	= new HashSet<Examination>(0);
	private Set<HouseTransfer>	houseTransfersForCreateUser	= new HashSet<HouseTransfer>(0);
	private Set<Primer>			primersForUpdateUser		= new HashSet<Primer>(0);
	private Set<House>			housesForCreateUser			= new HashSet<House>(0);
	private Set<Examination>	examinationsForCreateUser	= new HashSet<Examination>(0);
	private Set<Anatomy>		anatomiesForUpdateUser		= new HashSet<Anatomy>(0);
	private Set<Adr>			adrsForCreateUser			= new HashSet<Adr>(0);
	private Set<Animal>			animalsForCreateUser		= new HashSet<Animal>(0);
	private Set<AntiEpidemic>	antiEpidemicsForUpdateUser	= new HashSet<AntiEpidemic>(0);
	private Set<Feed>			feedsForCreateUser			= new HashSet<Feed>(0);
	private Set<AnimalFeed>		animalFeedsForCreateUser	= new HashSet<AnimalFeed>(0);
	private Set<AnimalType>		animalTypesForUpdateUser	= new HashSet<AnimalType>(0);
	private Set<Feed>			feedsForUpdateUser			= new HashSet<Feed>(0);
	private Set<Genotype>		genotypesForCreateUser		= new HashSet<Genotype>(0);
	private Set<Adr>			adrsForUpdateUser			= new HashSet<Adr>(0);
	private Set<AnimalFeed>		animalFeedsForUpdateUser	= new HashSet<AnimalFeed>(0);

	public User() {
	}

	public User(String name) {
		this.name = name;
	}

	public User(String name, String password, String trueName, Boolean sex, Integer age, Date createTime, Integer status, String remark,
			Set<Genotype> genotypesForUpdateUser, Set<AntiEpidemic> antiEpidemicsForCreateUser, Set<Atta> attasForUpdateUser,
			Set<AnimalType> animalTypesForCreateUser, Set<House> housesForUpdateUser, Set<Anatomy> anatomiesForCreateUser,
			Set<Atta> attasForUploadUser, Set<HouseTransfer> houseTransfersForUpdateUser, Set<Primer> primersForCreateUser,
			Set<AnimalFeed> animalFeedsForFeedUser, Set<Role> roles, Set<Animal> animalsForUpdateUser,
			Set<Examination> examinationsForUpdateUser, Set<HouseTransfer> houseTransfersForCreateUser, Set<Primer> primersForUpdateUser,
			Set<House> housesForCreateUser, Set<Examination> examinationsForCreateUser, Set<Anatomy> anatomiesForUpdateUser,
			Set<Adr> adrsForCreateUser, Set<Animal> animalsForCreateUser, Set<AntiEpidemic> antiEpidemicsForUpdateUser,
			Set<Feed> feedsForCreateUser, Set<AnimalFeed> animalFeedsForCreateUser, Set<AnimalType> animalTypesForUpdateUser,
			Set<Feed> feedsForUpdateUser, Set<Genotype> genotypesForCreateUser, Set<Adr> adrsForUpdateUser,
			Set<AnimalFeed> animalFeedsForUpdateUser) {
		this.name = name;
		this.password = password;
		this.trueName = trueName;
		this.sex = sex;
		this.age = age;
		this.createTime = createTime;
		this.status = status;
		this.remark = remark;
		this.genotypesForUpdateUser = genotypesForUpdateUser;
		this.antiEpidemicsForCreateUser = antiEpidemicsForCreateUser;
		this.attasForUpdateUser = attasForUpdateUser;
		this.animalTypesForCreateUser = animalTypesForCreateUser;
		this.housesForUpdateUser = housesForUpdateUser;
		this.anatomiesForCreateUser = anatomiesForCreateUser;
		this.attasForUploadUser = attasForUploadUser;
		this.houseTransfersForUpdateUser = houseTransfersForUpdateUser;
		this.primersForCreateUser = primersForCreateUser;
		this.animalFeedsForFeedUser = animalFeedsForFeedUser;
		this.roles = roles;
		this.animalsForUpdateUser = animalsForUpdateUser;
		this.examinationsForUpdateUser = examinationsForUpdateUser;
		this.houseTransfersForCreateUser = houseTransfersForCreateUser;
		this.primersForUpdateUser = primersForUpdateUser;
		this.housesForCreateUser = housesForCreateUser;
		this.examinationsForCreateUser = examinationsForCreateUser;
		this.anatomiesForUpdateUser = anatomiesForUpdateUser;
		this.adrsForCreateUser = adrsForCreateUser;
		this.animalsForCreateUser = animalsForCreateUser;
		this.antiEpidemicsForUpdateUser = antiEpidemicsForUpdateUser;
		this.feedsForCreateUser = feedsForCreateUser;
		this.animalFeedsForCreateUser = animalFeedsForCreateUser;
		this.animalTypesForUpdateUser = animalTypesForUpdateUser;
		this.feedsForUpdateUser = feedsForUpdateUser;
		this.genotypesForCreateUser = genotypesForCreateUser;
		this.adrsForUpdateUser = adrsForUpdateUser;
		this.animalFeedsForUpdateUser = animalFeedsForUpdateUser;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "NAME", unique = true, nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "PASSWORD")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "TRUE_NAME", length = 50)
	public String getTrueName() {
		return this.trueName;
	}

	public void setTrueName(String trueName) {
		this.trueName = trueName;
	}

	@Column(name = "SEX")
	public Boolean getSex() {
		return this.sex;
	}

	public void setSex(Boolean sex) {
		this.sex = sex;
	}

	@Column(name = "AGE")
	public Integer getAge() {
		return this.age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_TIME", length = 19)
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Column(name = "STATUS")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@Column(name = "REMARK", length = 300)
	public String getRemark() {
		return this.remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Genotype> getGenotypesForUpdateUser() {
		return this.genotypesForUpdateUser;
	}

	public void setGenotypesForUpdateUser(Set<Genotype> genotypesForUpdateUser) {
		this.genotypesForUpdateUser = genotypesForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<AntiEpidemic> getAntiEpidemicsForCreateUser() {
		return this.antiEpidemicsForCreateUser;
	}

	public void setAntiEpidemicsForCreateUser(Set<AntiEpidemic> antiEpidemicsForCreateUser) {
		this.antiEpidemicsForCreateUser = antiEpidemicsForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Atta> getAttasForUpdateUser() {
		return this.attasForUpdateUser;
	}

	public void setAttasForUpdateUser(Set<Atta> attasForUpdateUser) {
		this.attasForUpdateUser = attasForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<AnimalType> getAnimalTypesForCreateUser() {
		return this.animalTypesForCreateUser;
	}

	public void setAnimalTypesForCreateUser(Set<AnimalType> animalTypesForCreateUser) {
		this.animalTypesForCreateUser = animalTypesForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<House> getHousesForUpdateUser() {
		return this.housesForUpdateUser;
	}

	public void setHousesForUpdateUser(Set<House> housesForUpdateUser) {
		this.housesForUpdateUser = housesForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<Anatomy> getAnatomiesForCreateUser() {
		return this.anatomiesForCreateUser;
	}

	public void setAnatomiesForCreateUser(Set<Anatomy> anatomiesForCreateUser) {
		this.anatomiesForCreateUser = anatomiesForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUploadUser")
	public Set<Atta> getAttasForUploadUser() {
		return this.attasForUploadUser;
	}

	public void setAttasForUploadUser(Set<Atta> attasForUploadUser) {
		this.attasForUploadUser = attasForUploadUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<HouseTransfer> getHouseTransfersForUpdateUser() {
		return this.houseTransfersForUpdateUser;
	}

	public void setHouseTransfersForUpdateUser(Set<HouseTransfer> houseTransfersForUpdateUser) {
		this.houseTransfersForUpdateUser = houseTransfersForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<Primer> getPrimersForCreateUser() {
		return this.primersForCreateUser;
	}

	public void setPrimersForCreateUser(Set<Primer> primersForCreateUser) {
		this.primersForCreateUser = primersForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByFeedUser")
	public Set<AnimalFeed> getAnimalFeedsForFeedUser() {
		return this.animalFeedsForFeedUser;
	}

	public void setAnimalFeedsForFeedUser(Set<AnimalFeed> animalFeedsForFeedUser) {
		this.animalFeedsForFeedUser = animalFeedsForFeedUser;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_role", catalog = "rpms", joinColumns = { @JoinColumn(name = "USER", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "ROLE", nullable = false, updatable = false) })
	public Set<Role> getRoles() {
		return this.roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Animal> getAnimalsForUpdateUser() {
		return this.animalsForUpdateUser;
	}

	public void setAnimalsForUpdateUser(Set<Animal> animalsForUpdateUser) {
		this.animalsForUpdateUser = animalsForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Examination> getExaminationsForUpdateUser() {
		return this.examinationsForUpdateUser;
	}

	public void setExaminationsForUpdateUser(Set<Examination> examinationsForUpdateUser) {
		this.examinationsForUpdateUser = examinationsForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<HouseTransfer> getHouseTransfersForCreateUser() {
		return this.houseTransfersForCreateUser;
	}

	public void setHouseTransfersForCreateUser(Set<HouseTransfer> houseTransfersForCreateUser) {
		this.houseTransfersForCreateUser = houseTransfersForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Primer> getPrimersForUpdateUser() {
		return this.primersForUpdateUser;
	}

	public void setPrimersForUpdateUser(Set<Primer> primersForUpdateUser) {
		this.primersForUpdateUser = primersForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<House> getHousesForCreateUser() {
		return this.housesForCreateUser;
	}

	public void setHousesForCreateUser(Set<House> housesForCreateUser) {
		this.housesForCreateUser = housesForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<Examination> getExaminationsForCreateUser() {
		return this.examinationsForCreateUser;
	}

	public void setExaminationsForCreateUser(Set<Examination> examinationsForCreateUser) {
		this.examinationsForCreateUser = examinationsForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Anatomy> getAnatomiesForUpdateUser() {
		return this.anatomiesForUpdateUser;
	}

	public void setAnatomiesForUpdateUser(Set<Anatomy> anatomiesForUpdateUser) {
		this.anatomiesForUpdateUser = anatomiesForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<Adr> getAdrsForCreateUser() {
		return this.adrsForCreateUser;
	}

	public void setAdrsForCreateUser(Set<Adr> adrsForCreateUser) {
		this.adrsForCreateUser = adrsForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<Animal> getAnimalsForCreateUser() {
		return this.animalsForCreateUser;
	}

	public void setAnimalsForCreateUser(Set<Animal> animalsForCreateUser) {
		this.animalsForCreateUser = animalsForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<AntiEpidemic> getAntiEpidemicsForUpdateUser() {
		return this.antiEpidemicsForUpdateUser;
	}

	public void setAntiEpidemicsForUpdateUser(Set<AntiEpidemic> antiEpidemicsForUpdateUser) {
		this.antiEpidemicsForUpdateUser = antiEpidemicsForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<Feed> getFeedsForCreateUser() {
		return this.feedsForCreateUser;
	}

	public void setFeedsForCreateUser(Set<Feed> feedsForCreateUser) {
		this.feedsForCreateUser = feedsForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<AnimalFeed> getAnimalFeedsForCreateUser() {
		return this.animalFeedsForCreateUser;
	}

	public void setAnimalFeedsForCreateUser(Set<AnimalFeed> animalFeedsForCreateUser) {
		this.animalFeedsForCreateUser = animalFeedsForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<AnimalType> getAnimalTypesForUpdateUser() {
		return this.animalTypesForUpdateUser;
	}

	public void setAnimalTypesForUpdateUser(Set<AnimalType> animalTypesForUpdateUser) {
		this.animalTypesForUpdateUser = animalTypesForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Feed> getFeedsForUpdateUser() {
		return this.feedsForUpdateUser;
	}

	public void setFeedsForUpdateUser(Set<Feed> feedsForUpdateUser) {
		this.feedsForUpdateUser = feedsForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreateUser")
	public Set<Genotype> getGenotypesForCreateUser() {
		return this.genotypesForCreateUser;
	}

	public void setGenotypesForCreateUser(Set<Genotype> genotypesForCreateUser) {
		this.genotypesForCreateUser = genotypesForCreateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<Adr> getAdrsForUpdateUser() {
		return this.adrsForUpdateUser;
	}

	public void setAdrsForUpdateUser(Set<Adr> adrsForUpdateUser) {
		this.adrsForUpdateUser = adrsForUpdateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByUpdateUser")
	public Set<AnimalFeed> getAnimalFeedsForUpdateUser() {
		return this.animalFeedsForUpdateUser;
	}

	public void setAnimalFeedsForUpdateUser(Set<AnimalFeed> animalFeedsForUpdateUser) {
		this.animalFeedsForUpdateUser = animalFeedsForUpdateUser;
	}

}
