package dendy.rpms.entity;

// Generated 2014-10-26 13:48:43 by Hibernate Tools 3.6.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * House generated by hbm2java
 */
@Entity
@Table(name = "house", catalog = "rpms")
public class House implements java.io.Serializable {

	private Long				id;
	private User				userByUpdateUser;
	private User				userByCreateUser;
	private String				numer;
	private String				name;
	private String				location;
	private String				zoo;
	private String				description;
	private Date				createTime;
	private Date				updateTime;
	private String				remark;
	private Set<HouseTransfer>	houseTransfersForDestHouse	= new HashSet<HouseTransfer>(0);
	private Set<HouseTransfer>	houseTransfersForSrcHouse	= new HashSet<HouseTransfer>(0);
	private Set<Animal>			animals						= new HashSet<Animal>(0);

	public House() {
	}

	public House(User userByUpdateUser, User userByCreateUser, String numer, String name, String location, String zoo, String description,
			Date createTime, Date updateTime, String remark, Set<HouseTransfer> houseTransfersForDestHouse,
			Set<HouseTransfer> houseTransfersForSrcHouse, Set<Animal> animals) {
		this.userByUpdateUser = userByUpdateUser;
		this.userByCreateUser = userByCreateUser;
		this.numer = numer;
		this.name = name;
		this.location = location;
		this.zoo = zoo;
		this.description = description;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.remark = remark;
		this.houseTransfersForDestHouse = houseTransfersForDestHouse;
		this.houseTransfersForSrcHouse = houseTransfersForSrcHouse;
		this.animals = animals;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "UPDATE_USER")
	public User getUserByUpdateUser() {
		return this.userByUpdateUser;
	}

	public void setUserByUpdateUser(User userByUpdateUser) {
		this.userByUpdateUser = userByUpdateUser;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CREATE_USER")
	public User getUserByCreateUser() {
		return this.userByCreateUser;
	}

	public void setUserByCreateUser(User userByCreateUser) {
		this.userByCreateUser = userByCreateUser;
	}

	@Column(name = "NUMER", length = 50)
	public String getNumer() {
		return this.numer;
	}

	public void setNumer(String numer) {
		this.numer = numer;
	}

	@Column(name = "NAME", length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "LOCATION", length = 200)
	public String getLocation() {
		return this.location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	@Column(name = "ZOO", length = 100)
	public String getZoo() {
		return this.zoo;
	}

	public void setZoo(String zoo) {
		this.zoo = zoo;
	}

	@Column(name = "DESCRIPTION", length = 500)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_TIME", length = 19)
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UPDATE_TIME", length = 19)
	public Date getUpdateTime() {
		return this.updateTime;
	}

	public void setUpdateTime(Date updateTime) {
		this.updateTime = updateTime;
	}

	@Column(name = "REMARK", length = 300)
	public String getRemark() {
		return this.remark;
	}

	public void setRemark(String remark) {
		this.remark = remark;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "houseByDestHouse")
	public Set<HouseTransfer> getHouseTransfersForDestHouse() {
		return this.houseTransfersForDestHouse;
	}

	public void setHouseTransfersForDestHouse(Set<HouseTransfer> houseTransfersForDestHouse) {
		this.houseTransfersForDestHouse = houseTransfersForDestHouse;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "houseBySrcHouse")
	public Set<HouseTransfer> getHouseTransfersForSrcHouse() {
		return this.houseTransfersForSrcHouse;
	}

	public void setHouseTransfersForSrcHouse(Set<HouseTransfer> houseTransfersForSrcHouse) {
		this.houseTransfersForSrcHouse = houseTransfersForSrcHouse;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "house")
	public Set<Animal> getAnimals() {
		return this.animals;
	}

	public void setAnimals(Set<Animal> animals) {
		this.animals = animals;
	}

}
